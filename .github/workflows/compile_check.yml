
name: Compile and check

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

env:
  EXECUTABLES: "zappy_ai zappy_server zappy_gui"

jobs:
  check_coding_style:
    runs-on: ubuntu-latest
    container: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run coding style checker
        run: |
          rm -rf libs/myteams
          check.sh $(pwd) $(pwd)

          declare -A error_messages
          error_messages["C-G1"]="Multiline statements should not use backslash"
          error_messages["C-G1"]="C files must contain header files (*.h && *.c)"
          error_messages["C-G2"]="In sources files, functions must be separated by a single blank line"
          error_messages["C-G3"]="Preprocessor directives (#ifndef, #define, ...) must be indented"
          error_messages["C-G4"]="Global variables must be avoided, only global constants are allowed"
          error_messages["C-G5"]="Include directives must only include C header files (.h)"
          error_messages["C-G6"]="Lines must end with a single line feed (LF) character ('\\\n')"
          error_messages["C-G7"]="No trailing whitespaces must be present at the end of the line"
          error_messages["C-G8"]="No more than 1 empty line must be present"
          error_messages["C-G9"]="Non-trivial constant must be defined as macros or global constants"
          error_messages["C-G10"]="Inline assembly are not allowed"
          error_messages["C-O1"]="Repository must not contain compiled files (.o, .a, .out, .exe, ...)"
          error_messages["C-O2"]="Sources in a C programm must only have .c or .h extension"
          error_messages["C-O3"]="Files cannot exeed 10 functions (at most 5 non-static functions)"
          error_messages["C-O4"]="The file name must be clear, explicit following the snake_case convention"
          error_messages["C-F1"]="A function should do one thing and only one thing"
          error_messages["C-F2"]="1 function must contain a verb, be english and follow the snake_case convention"
          error_messages["C-F3"]="The lenght of a column must not exceed 80 characters ('\\\n' included)"
          error_messages["C-F4"]="The body of a function must not exceed 20 lines"
          error_messages["C-F5"]="A function must not contain more than 4 parameters"
          error_messages["C-F6"]="A function without parameters must be declared with 'void'"
          error_messages["C-F7"]="Structures must be passed by pointer"
          error_messages["C-F8"]="There must be no comment within a function"
          error_messages["C-F9"]="Nested functions are not allowed"
          error_messages["C-L1"]="A line must correspond to a only a SINGLE statement"
          error_messages["C-L2"]="Indentation must be done with 4 spaces"
          error_messages["C-L3"]="place a space after a comma or keyword"
          error_messages["C-L4"]="Curly brackets"
          error_messages["C-L5"]="Variables must be declared at the beginning of a block, one per line"
          error_messages["C-L6"]="A blank line must separate declarations from instructions"
          error_messages["C-V1"]="Identifiers must be in Eng, following snake_case, and *_t for typedefs, macros with UPPER_CASE"
          error_messages["C-V2"]="Variables can only be grouped in a structure if they are related"
          error_messages["C-V3"]="Pointer's asterisk must be placed next to the variable name"
          error_messages["C-C1"]="Conditional statements cannont be nested more than 3 times"
          error_messages["C-C2"]="Ternary operator is allowed if kept readable"
          error_messages["C-C3"]="Using goto is forbidden"
          error_messages["C-H1"]="Header files cannot contain any function definition"
          error_messages["C-H2"]="Headers must be protected from double inclusion"
          error_messages["C-H3"]="Macros must match only one statement on a single line"
          error_messages["C-A1"]="If a data from a pointer is not modified it should be declared as const"
          error_messages["C-A2"]="Use more accurate types instead of int (size_t, ssize_t, ...)"
          error_messages["C-A3"]="Files must end with a line break (LF, '\\\n')"
          error_messages["C-A4"]="Global variables and function unused outside of the file must be declared as static"

          grep --invert-match "./server/tests" coding-style-reports.log | while IFS= read -r line; do
            file=$(echo "$line" | awk -F ':' '{print $1}')
            line_number=$(echo "$line" | awk -F ':' '{print $2}')
            severity=$(echo "$line" | awk -F ':' '{print $3}')
            message=$(echo "$line" | awk -F ':' '{print $4}')
            custom_message="${error_messages[$message]:-Unknown Error}"
            echo "::error file=$file,line=$line_number::$severity $message $custom_message"
          done < coding-style-reports.log
          line_count=$(grep --invert-match "./server/tests" coding-style-reports.log | wc -l)
          if [ "$line_count" -gt 0 ]; then
            echo "::error::Too many style errors (skill issue)"
            exit 1
          fi

  compile_and_run_tests:
    runs-on: ubuntu-latest
    container: epitechcontent/epitest-docker
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Checkout submodules
        run: |
          git submodule update --init --recursive

      - name: Compile program
        run: make; make fclean; make re

      # fail if executable is not found
      - name: Check executables
        run: |
          echo "## Executables" >> $GITHUB_STEP_SUMMARY
          for executable in $EXECUTABLES; do
            if [ ! -f $executable ]; then
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              echo "Error: $executable not found" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          done
